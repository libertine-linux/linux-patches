#!/usr/bin/env sh
# This file is part of linux-patches. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux/linux-patches/master/COPYRIGHT. No part of linux-patches, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2016 The developers of linux-patches. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux/linux-patches/master/COPYRIGHT.


set -e
set -u
set -f


_program_path_find()
{
    if [ "${_program_fattening_program_path+set}" = 'set' ]; then
        printf '%s\n' "$_program_fattening_program_path"

    elif [ "${0%/*}" = "$0" ]; then

        # We've been invoked by the interpreter as, say, bash program
        if [ -r "$0" ]; then
            pwd -P
        # Clutching at straws; probably run via a download, anonymous script, etc, weird execve, etc
        else
            printf '\n'
        fi

    else

        # We've been invoked with a relative or absolute path (also when invoked via PATH in a shell)

        _program_path_find_parentPath()
        {
            parentPath="${scriptPath%/*}"
            if [ -z "$parentPath" ]; then
                parentPath='/'
            fi
            cd "$parentPath" 1>/dev/null
        }

        # pdksh / mksh have problems with unsetting a variable that was never set...
        if [ "${CDPATH+set}" = 'set' ]; then
            unset CDPATH
        fi

        if command -v realpath 1>/dev/null 2>/dev/null; then
            (
                scriptPath="$(realpath "$0")"

                _program_path_find_parentPath
                pwd -P
            )
        elif command -v readlink 1>/dev/null 2>/dev/null; then
            (
                scriptPath="$0"

                while [ -L "$scriptPath" ]
                do
                    _program_path_find_parentPath
                    scriptPath="$(readlink "$scriptPath")"
                done

                _program_path_find_parentPath
                pwd -P
            )
        else
            # This approach will fail in corner cases where the script itself is a symlink in a path not parallel with the concrete script
            (
                scriptPath="$0"

                _program_path_find_parentPath
                pwd -P
            )
        fi

    fi
}

apply_patches_help()
{
	cat <<-EOF
		Usage: apply-patches LINUX_FOLDER
		Usage: apply-patches -h|--help
		
		Options:
		  LINUX_FOLDER   A path to a linux source folder to patch
	EOF
}

apply_patches_error()
{
	local message="$1"
	
	{
		printf 'Error: %s\n' "$message"
		apply_patches_help
	} 1>&2
	exit 1
}

apply_patches_message()
{
	local message="$1"
	
	printf '%s\n' "$message" 1>&2
}

apply_patches_assertProgramIsPresent()
{
	local isMissingProgram=false
	local programName
	for programName in "$@"
	do
		if ! command -v "$programName" 1>/dev/null 2>/dev/null; then
			apply_patches_message "The program '$programName' is not on the PATH"
			isMissingProgram=true
		fi
	done
	
	if $isMissingProgram; then
		apply_patches_error "Missing programs listed above"
	fi
}

apply_patches_findLinuxVersion()
{
	apply_patches_assertProgramIsPresent grep awk
	_apply_patches_findLinuxVersion_for()
	{
		local variableName="$1"
				
		grep -m 1 '^'"$variableName"' = ' "$absoluteLinuxFolderPath"/Makefile | awk '{print $3}'
	}
	
	if [ ! -f "$absoluteLinuxFolderPath"/Makefile ]; then
		apply_patches_error "LINUX_FOLDER '$apply_patches_LINUX_FOLDER' does not contain a Makefile"
	fi
	if [ ! -s "$absoluteLinuxFolderPath"/Makefile ]; then
		apply_patches_error "LINUX_FOLDER '$apply_patches_LINUX_FOLDER' does not contain a Makefile with content"
	fi
	
	local version0="$(_apply_patches_findLinuxVersion_for VERSION)"
	local version1="$(_apply_patches_findLinuxVersion_for PATCHLEVEL)"
	local version2="$(_apply_patches_findLinuxVersion_for SUBLEVEL)"
	local extraversion="$(_apply_patches_findLinuxVersion_for EXTRAVERSION)"
	
	apply_patches_linuxVersion="$version0"."$version1"."$version2"
	if [ -n "$extraversion" ]; then
		apply_patches_linuxVersion="$apply_patches_linuxVersion"."$extraversion"
	fi
}

apply_patches_generateOursPatch()
{
	local oursFolderPath="$ourFolderPath"/upstream/ours
	
	local oursVersionFolderPath="$oursFolderPath"/"$apply_patches_linuxVersion"
	
	if [ ! -d "$oursVersionFolderPath" ]; then
		apply_patches_error "Detected Linux version '$apply_patches_linuxVersion' doesn't have a patch folder at '$oursVersionFolderPath'"
	fi
	
	"$oursFolderPath"/create-our-patches "$apply_patches_linuxVersion"
	
	if [ -s "$oursVersionFolderPath"/ours.patch ]; then
		apply_patches_assertProgramIsPresent rm ln
		
		local symlinkPath="$absoluteVersionFolderPath"/000-ours-ours.patch
		rm -rf "$symlinkPath"
		ln -s ../../upstream/ours/"$apply_patches_linuxVersion"/ours.patch "$symlinkPath"
	fi
}

apply_patches_execute()
{
	apply_patches_assertProgramIsPresent patch
	
	cd "$absoluteLinuxFolderPath" 1>/dev/null 2>/dev/null
		
		local afterFirst=false
		local patchFile
		set +f
		for patchFile in "$absoluteVersionFolderPath"/*.patch
		do
			set -f
			if [ ! -f "$patchFile" ]; then
				continue
			fi
		
			if $afterFirst; then
				apply_patches_message ''
			else
				afterFirst=true
			fi
			apply_patches_message "PATCHING using '$patchFile'"
			set +e
				patch -p1 -i "$patchFile" 1>&2
				local exitCode=$?
			set -e

			if [ $exitCode -ne 0 ]; then
				apply_patches_error "FAILED"
			else
				apply_patches_message "SUCCEEDED"
			fi
		done
		set -f
		
	cd - 1>/dev/null 2>/dev/null
	
	if [ -e "$absoluteLinuxFolderPath"/.git ]; then
		apply_patches_message ''
		apply_patches_message 'DONE - Unapply patches with: cd $absoluteLinuxFolderPath; git reset --hard; git clean -f -d -x; cd -'
	fi
}

apply_patches_main()
{
	cd "$(_program_path_find)" 1>/dev/null 2>/dev/null
		local ourFolderPath="$(pwd)"
	cd - 1>/dev/null 2>/dev/null
	
	case $# in
		
		1)
			case "$1" in
				
				-h|--help)
					apply_patches_help
					exit 0
				;;
				
				'')
					apply_patches_error "LINUX_FOLDER can not be empty"
				;;
				
				*)
					local apply_patches_LINUX_FOLDER="$1"
					if [ ! -d "$apply_patches_LINUX_FOLDER" ]; then
						apply_patches_error "LINUX_FOLDER '$apply_patches_LINUX_FOLDER' does not exist or is not a directory"
					fi
					if [ ! -r "$apply_patches_LINUX_FOLDER" ]; then
						apply_patches_error "LINUX_FOLDER '$apply_patches_LINUX_FOLDER' is not readable"
					fi
					if [ ! -x "$apply_patches_LINUX_FOLDER" ]; then
						apply_patches_error "LINUX_FOLDER '$apply_patches_LINUX_FOLDER' is not searchable"
					fi
					if [ ! -w "$apply_patches_LINUX_FOLDER" ]; then
						apply_patches_error "LINUX_FOLDER '$apply_patches_LINUX_FOLDER' is not writable"
					fi
			
					cd "$apply_patches_LINUX_FOLDER" 1>/dev/null 2>/dev/null
						local absoluteLinuxFolderPath="$(pwd)"
					cd - 1>/dev/null 2>/dev/null
				;;
				
			esac
		;;
		
		*)
			apply_patches_error "Incorrect number of arguments"
		;;
		
	esac

	local apply_patches_linuxVersion
	apply_patches_findLinuxVersion
	
	local absoluteVersionFolderPath="$ourFolderPath"/patches/"$apply_patches_linuxVersion"
	
	if [ ! -d "$absoluteVersionFolderPath" ]; then
		apply_patches_error "Detected Linux version '$apply_patches_linuxVersion' does not exist or is not a directory at '$absoluteVersionFolderPath'"
	fi
	if [ ! -r "$absoluteVersionFolderPath" ]; then
		apply_patches_error "Detected Linux version '$apply_patches_linuxVersion' is not readable at '$absoluteVersionFolderPath'"
	fi
	if [ ! -x "$absoluteVersionFolderPath" ]; then
		apply_patches_error "Detected Linux version '$apply_patches_linuxVersion' is not searchable at '$absoluteVersionFolderPath'"
	fi
	
	apply_patches_generateOursPatch
	
	apply_patches_execute
}

apply_patches_main "$@"
