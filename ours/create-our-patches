#!/usr/bin/env sh
# This file is part of linux-patches. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux/linux-patches/master/COPYRIGHT. No part of linux-patches, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2016 The developers of linux-patches. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux/linux-patches/master/COPYRIGHT.


set -e
set -u
set -f


_program_path_find()
{
    if [ "${_program_fattening_program_path+set}" = 'set' ]; then
        printf '%s\n' "$_program_fattening_program_path"

    elif [ "${0%/*}" = "$0" ]; then

        # We've been invoked by the interpreter as, say, bash program
        if [ -r "$0" ]; then
            pwd -P
        # Clutching at straws; probably run via a download, anonymous script, etc, weird execve, etc
        else
            printf '\n'
        fi

    else

        # We've been invoked with a relative or absolute path (also when invoked via PATH in a shell)

        _program_path_find_parentPath()
        {
            parentPath="${scriptPath%/*}"
            if [ -z "$parentPath" ]; then
                parentPath='/'
            fi
            cd "$parentPath" 1>/dev/null
        }

        # pdksh / mksh have problems with unsetting a variable that was never set...
        if [ "${CDPATH+set}" = 'set' ]; then
            unset CDPATH
        fi

        if command -v realpath 1>/dev/null 2>/dev/null; then
            (
                scriptPath="$(realpath "$0")"

                _program_path_find_parentPath
                pwd -P
            )
        elif command -v readlink 1>/dev/null 2>/dev/null; then
            (
                scriptPath="$0"

                while [ -L "$scriptPath" ]
                do
                    _program_path_find_parentPath
                    scriptPath="$(readlink "$scriptPath")"
                done

                _program_path_find_parentPath
                pwd -P
            )
        else
            # This approach will fail in corner cases where the script itself is a symlink in a path not parallel with the concrete script
            (
                scriptPath="$0"

                _program_path_find_parentPath
                pwd -P
            )
        fi

    fi
}

create_patches_help()
{
	cat <<-EOF
		Usage: create-patches LINUX_VERSION
		Usage: create-patches -h|--help
		
		Options:
		  LINUX_VERSION   A version
	EOF
}

create_patches_error()
{
	local message="$1"
	
	{
		printf 'Error: %s\n' "$message"
		create_patches_help
	} 1>&2
	exit 1
}

create_patches_message()
{
	local message="$1"
	
	printf '%s\n' "$message" 1>&2
}

create_patches_assertProgramIsPresent()
{
	local isMissingProgram=false
	local programName
	for programName in "$@"
	do
		if ! command -v "$programName" 1>/dev/null 2>/dev/null; then
			create_patches_message "The program '$programName' is not on the PATH"
			isMissingProgram=true
		fi
	done
	
	if $isMissingProgram; then
		create_patches_error "Missing programs listed above"
	fi
}

create_patches_create()
{
	create_patches_assertProgramIsPresent diff find xargs rm
	
	
	cd "$upstreamPatchesFolderPath" 1>/dev/null 2>/dev/null
		
		# Remove NFS files that Mac OS X can insert
		find . -name '._*' -print0 | xargs -0 -r rm
	
		set +e
			diff -N -u -r 1-after-hardening 2-our-changes
			local exitCode=$?
		set -e
		
		# 0 no differences
		# 1 differences
		# 2 trouble
		if [ $exitCode -gt 1 ]; then
			create_patches_error "diff returned exit code '$exitCode'"
		fi
	
	cd - 1>/dev/null 2>/dev/null
}

create_patches_main()
{
	cd "$(_program_path_find)" 1>/dev/null 2>/dev/null
		local ourFolderPath="$(pwd)"
	cd - 1>/dev/null 2>/dev/null
	
	case $# in
		
		1)
			case "$1" in
				
				-h|--help)
					create_patches_help
					exit 0
				;;
				
				*)
					local LINUX_VERSION="$1"
					local upstreamPatchesFolderPath="$ourFolderPath"/"$LINUX_VERSION"
					
					if [ ! -d "$upstreamPatchesFolderPath" ]; then
						create_patches_error "LINUX_VERSION '$LINUX_VERSION' pointing to '$upstreamPatchesFolderPath' does not exist or is not a directory"
					fi
					if [ ! -r "$upstreamPatchesFolderPath" ]; then
						create_patches_error "LINUX_VERSION '$LINUX_VERSION' pointing to '$upstreamPatchesFolderPath' is not readable"
					fi
					if [ ! -x "$upstreamPatchesFolderPath" ]; then
						create_patches_error "LINUX_VERSION '$LINUX_VERSION' pointing to '$upstreamPatchesFolderPath' is not searchable"
					fi
					if [ ! -w "$upstreamPatchesFolderPath" ]; then
						create_patches_error "LINUX_VERSION '$LINUX_VERSION' pointing to '$upstreamPatchesFolderPath' is not writable"
					fi
					
					if [ ! -d "$upstreamPatchesFolderPath"/1-after-hardening ]; then
						create_patches_error "LINUX_VERSION '$LINUX_VERSION' pointing to '$upstreamPatchesFolderPath/1-after-hardening' does not exist or is not a directory"
					fi
					if [ ! -r "$upstreamPatchesFolderPath"/1-after-hardening ]; then
						create_patches_error "LINUX_VERSION '$LINUX_VERSION' pointing to '$upstreamPatchesFolderPath/1-after-hardening' is not readable"
					fi
					if [ ! -x "$upstreamPatchesFolderPath"/1-after-hardening ]; then
						create_patches_error "LINUX_VERSION '$LINUX_VERSION' pointing to '$upstreamPatchesFolderPath/1-after-hardening' is not searchable"
					fi
					if [ ! -w "$upstreamPatchesFolderPath"/1-after-hardening ]; then
						create_patches_error "LINUX_VERSION '$LINUX_VERSION' pointing to '$upstreamPatchesFolderPath/1-after-hardening' is not writable"
					fi
					
					if [ ! -d "$upstreamPatchesFolderPath"/2-our-changes ]; then
						create_patches_error "LINUX_VERSION '$LINUX_VERSION' pointing to '$upstreamPatchesFolderPath/2-our-changes' does not exist or is not a directory"
					fi
					if [ ! -r "$upstreamPatchesFolderPath"/2-our-changes ]; then
						create_patches_error "LINUX_VERSION '$LINUX_VERSION' pointing to '$upstreamPatchesFolderPath/2-our-changes' is not readable"
					fi
					if [ ! -x "$upstreamPatchesFolderPath"/2-our-changes ]; then
						create_patches_error "LINUX_VERSION '$LINUX_VERSION' pointing to '$upstreamPatchesFolderPath/2-our-changes' is not searchable"
					fi
					if [ ! -w "$upstreamPatchesFolderPath"/2-our-changes ]; then
						create_patches_error "LINUX_VERSION '$LINUX_VERSION' pointing to '$upstreamPatchesFolderPath/2-our-changes' is not writable"
					fi
				;;
				
			esac
		;;
		
		*)
			create_patches_error "Incorrect number of arguments"
		;;
		
	esac
	
	create_patches_create
}

create_patches_main "$@"
